OpenclassroomsProject

# Faire des tests d'apprentissage
# D'abord se positioner sur son répertoire de travail

# Créer ledossier de travail s'il n'existe pas encore
mkdir SecondTest 
cd SecondTest

git config --global user.name "SaisirMonNom" git config --global user.email "SaisirMonAdresseEmail"
Configuer les couleurs par défaut

git config --global color.diff auto git config --global color.status auto git config --global color.branch auto

# Configuer l'éditeur de text
git config --global core.editor vim

# Configuer l'éditeur de text
git config --global merge.tool vimdiff

# Initialiser le dépot, ce qui création un dossier local .git
git init
ou
git config --global init.defaultBranch main

# Création de nouveau fichier

touch index.html
Indexer un nouveau fichier

git add index.html
# Voir le status du dépôt local pour savoir s'il y a des modifications en attente d'indexer

git status

git commit -m "Ajout du fichier index.html"
# Création de nouveau fichier
touch styles.css

Indexer les modifications ou ajout de nouveaux fichier
git add index.html styles.css

# Passer les données d'index en repositorie local
git commit -m "Ajout des fichiers html et css de base"

# Voir le status du dépôt local pour savoir s'il y a des modifications en attente d'indexer
git status

# Rélier ledépot local au depot distance
git remote add origin https://github.com/MikeAbdoul/SecondTest.git
# relié le dépôt local au dépôt distant
git branch -M main

# envoyer des commits du repository vers le dépôt distant GitHub 
git push -u origin main

# Saisir le nom d'utiliseur de github
# Le mot de passe correspond au token généré sur le site de githun


# Pour connaître les branches présentes dans notre projet
git branch

# L’étoile signifie que c’est la branche sur laquelle on est situé, et que c’est sur celle-ci qu'actuellement vous réalisez vos modifications.



######### Je vous conseille fortement de créer une branche si votre modification est lourde, compliquée, ou si elle risque d’avoir des impacts importants sur votre projet. ############

# Créer une nouvelle branche nommée
git branch cagnotte


# Pour basculer de branche, nous allons utiliser
git checkout cagnotte

# Encore si on veut connaître les branches présentes dans notre projet
git branch


# On peut ajouter de nouveau fichier et faire des modifications sur cette nouvelle branche
 
# Vous devez créer un "commit" grâce à la commande
git commit -m "Réalisation de la partie cagnotte côté front end"


# envoyer des commits du repository vers le dépôt distant GitHub 
git push -u origin cagnotte


# Fusionnez votre travail avec la commande git merge
# On révient sur la branch à partir de laquelle, on doit fusionner
git checkout main


# Maintenant que vous êtes dans votre branche principale, vous pouvez fusionner votre branche "cagnotte" à celle-ci grâce à la commande suivante
git merge cagnotte




 


